"""
Django settings for ZHIN project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-cplk96g&hkg3*qq9w4t=j=li1fvn9tzkmcn%cko(7_l^u*7dn8"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    "ninja_extra",
    "ninja_jwt",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ZHIN.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ZHIN.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
# 配置才能在生产环境收集静态文件  `python manage.py collectstatic`
# 这是 Django 收集所有静态文件的最终目标目录（通过 collectstatic 命令生成）。
STATIC_ROOT = os.path.join(BASE_DIR, "static")
# 配置了才能让admin的图表 favicon.ico 正常工作
# 这是 Django 在收集静态文件时，额外搜索的源目录（除了应用内部的 static/ 目录）。
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static/icon/'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# SECTION Ninja-JWT 权限认证
NINJA_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'ninja_jwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('ninja_jwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'ninja_jwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),

    # For Controller Schemas
    # FOR OBTAIN PAIR
    'TOKEN_OBTAIN_PAIR_INPUT_SCHEMA': "ninja_jwt.schema.TokenObtainPairInputSchema",
    'TOKEN_OBTAIN_PAIR_REFRESH_INPUT_SCHEMA': "ninja_jwt.schema.TokenRefreshInputSchema",
    # FOR SLIDING TOKEN
    'TOKEN_OBTAIN_SLIDING_INPUT_SCHEMA': "ninja_jwt.schema.TokenObtainSlidingInputSchema",
    'TOKEN_OBTAIN_SLIDING_REFRESH_INPUT_SCHEMA':"ninja_jwt.schema.TokenRefreshSlidingInputSchema",

    'TOKEN_BLACKLIST_INPUT_SCHEMA': "ninja_jwt.schema.TokenBlacklistInputSchema",
    'TOKEN_VERIFY_INPUT_SCHEMA': "ninja_jwt.schema.TokenVerifyInputSchema",
}


# SECTION: 日志系统
# DEBUG：用于调试目的的低级系统信息
# INFO：一般系统信息
# WARNING：已发生的小问题的警告信息。
# ERROR：已发生的主要问题的错误信息。
# CRITICAL：已发生的严重问题的信息。

# 创建log文件的文件夹
LOG_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOG_DIR):
    os.mkdir(LOG_DIR)
    
# 日志配置
LOGGING = {
    "version": 1,
    # 禁用已经存在的logger实例，False：不禁用
    "disable_existing_loggers": False,

    # 过滤器：可以对日志进行输出时的过滤用的
    'filters': {
        # 在debug=True下产生的一些日志信息，要不要记录日志，需要的话就在handlers中加上这个过滤器，不需要就不加
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        # 和上面相反
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },

    # 定义了两种日志格式
    "formatters": {
        # 详细
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s "
                      "%(process)d %(thread)d %(message)s"
        },
        # 简单
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
    },

    # 定义了三种日志处理方式
    "handlers": {
        # 只有debug=False且Error级别以上发邮件给admin
        # "mail_admins": {
        #     "level": "ERROR",
        #     "filters": ["require_debug_false"],
        #     "class": "django.utils.log.AdminEmailHandler",
        # },
        # 对INFO级别以上信息以日志文件形式保存
        'file': {
            'level': "INFO",

            # 滚动生成日志，切割。RotatingFileHandler是需要重点了解的
            # 'class': 'logging.handlers.RotatingFileHandler',
            # 这里我要实现按日期分割，所以进行了修改
            'class': 'logging.handlers.TimedRotatingFileHandler',

            # 在debug=False下才会打印在文件
            'filters': ['require_debug_false'],

            # 日志文件名
            'filename': os.path.join(LOG_DIR, 'django.log'),
            # 单个日志文件最大为10M
            # 'maxBytes': 1024 * 1024 * 10,
            # 日志备份文件最大数量，超过了就删咯
            'backupCount': 90,
            # 简单格式记录日志
            'formatter': 'simple',
            # 防止中文乱码
            'encoding': 'utf-8',

            # 每天切割一次日志：https://docs.python.org/3/library/logging.handlers.html#timedrotatingfilehandler
            'when': 'D',
            # 时间间隔
            'interval': 1,
        },
        # 对error级别以上信息以日志文件形式保存
        'error': {
            'level': "ERROR",

            # 滚动生成日志，切割。RotatingFileHandler是需要重点了解的
            # 'class': 'logging.handlers.RotatingFileHandler',
            # 这里我要实现按日期分割，所以进行了修改
            'class': 'logging.handlers.TimedRotatingFileHandler',

            # 在debug=False下才会打印在文件
            'filters': ['require_debug_false'],

            # 日志文件名
            'filename': os.path.join(LOG_DIR, 'error.log'),
            # 单个日志文件最大为10M
            # 'maxBytes': 1024 * 1024 * 10,
            # 日志备份文件最大数量，超过了就删咯
            'backupCount': 90,
            # 详细格式记录日志
            'formatter': 'verbose',
            # 防止中文乱码
            'encoding': 'utf-8',

            # 每天切割一次日志：https://docs.python.org/3/library/logging.handlers.html#timedrotatingfilehandler
            'when': 'D',
            # 时间间隔
            'interval': 1,
        },
        # 打印到终端console
        "console": {
            "level": "DEBUG",
            # 使用的python的logging模块中的StreamHandler来进行输出
            "class": "logging.StreamHandler",
            # 详细格式输出
            "formatter": "verbose",
            # 可以设置debug开启的时候才在console中输出
            # 'filters': ['require_debug_true'],
        },
    },

    "loggers": {
        # Django的request发生error会自动记录
        # "django.request": {
        #     "handlers": ["mail_admins"],
        #     "level": "ERROR",
        #     # 向不向更高级别的logger传递
        #     "propagate": True,
        # },
        # 对于不在 ALLOWED_HOSTS 中的请求不发送报错邮件
        # "django.security.DisallowedHost": {
        #     "level": "ERROR",
        #     "handlers": ["console", "mail_admins"],
        #     "propagate": True,
        # },
        'django': {
            # 上线之后，要把console去掉，因为不需要控制台打印日志了，不过无所谓
            'handlers': ['console', 'file', 'error'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            # 冒泡：是否将日志信息记录冒泡给其他的日志处理系统，工作中都是True，不然django这个日志系统捕获到日志信息之后，其他模块中可能也有日志记录功能的模块，就获取不到这个日志信息了
            'propagate': False,
        },
    },
}